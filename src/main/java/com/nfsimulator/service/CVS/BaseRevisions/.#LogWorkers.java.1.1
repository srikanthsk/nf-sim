package com.nfsimulator.service;import org.antlr.stringtemplate.StringTemplate;import org.springframework.beans.factory.annotation.Value;import java.io.BufferedWriter;import java.io.File;import java.io.FileWriter;import java.io.IOException;import java.time.Instant;import java.time.LocalDate;import java.time.LocalDateTime;import java.time.LocalTime;import java.time.format.DateTimeFormatter;import java.util.Random;import java.util.UUID;import java.util.concurrent.atomic.AtomicInteger;/** * Created by netstorm on 19/3/17. */public class LogWorkers implements Runnable {    private volatile String logLocation;    private volatile String logFormat;    private String msgType;    private int waitTimeInsec;    private int noOfMsgsPerBurst;    private static int accessGenCount=0;    private static int setaGenCount=0;    private static int errorGenCount=0;    private static int gcGenCount=0;    private static int infoGenCount=0;    private boolean writeToFile;    private static final String[] users = {"james", "tony", "robert", "john"};    private static final String[] httpMethods = {"GET", "POST", "PUT", "DELETE"};    private static final String[] uriPathParameters = {            "/include/catalog/findstore.jsp?skuId=03513968&productId=297449",            "/store/checkout.jsp?skuId=03513968&productId=297449",            "/catalog/products.jsp"    };    private static final String[] uriParams = {"james", "tony", "robert", "john"};    private static final String[] statusCodes = {"200", "404", "403", "401"};    private static final String[] userAgents = {            "\"Mozilla/5.0 (iPad; U; CPU OS 3_2_1 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Mobile/7B405\"",            "\"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; InfoPath.2; .NET4.0C)\"",            "\"Opera/7.21 (X11; FreeBSD i386; U)  [en]\"",            "\"Googlebot/1.0 (googlebot@googlebot.com http://googlebot.com/)\""    };    private static final String[] xForwards = {            "\"2001:db8:85a3:8d3:1319:8a2e:370:7348\"",            "\"203.0.113.195\"",            "\"203.0.113.195, 70.41.3.18, 150.172.238.178\""    };    private static final String[] accessGreedyStrings = {            "\"[corRID::m21584f9843e1-26ed-40ce-943c-223c43f8a2a1][SID::3ECfNwef9tz1V18SxMO-EdtsqtARDbfGpV6YsWfSOsib2C0T4al5!-1902206761!957554599!1480139933599][PID::2254023574946854][UID::moore][OID::7021732168][dcroute::pkyb][VisitorId::2254023574946854][kohls_klbc_cookie::2818886154.23323.0000][kohls_klbd_cookie::204223148.20480.0000][DCRouteS::pkyb-1480139997]\"",            "\"[corRID::h21584f9843e2-26ed-40ce-943c-223c43f8a2a2][SID::4ECfNwef9tz1V18SxMP-EdtsqtARDbfGpV6YsWfSOsib2C0T4al6!-1902206762!957554597!1480139933597][PID::7864223574976852][UID::kennitar][OID::8071432168][dcroute::pkyb][VisitorId::3674023574946859][kohls_klbc_cookie::2818886154.23323.0000][kohls_klbd_cookie::204223148.20480.0000][DCRouteS::pkyb-1480139997]\"",            "\"[corRID::h21584f9843e3-26ed-40ce-943c-223c43f8a2a3][SID::5ECfNwef9tz1V18SxMQ-EdtsqtARDbfGpV6YsWfSOsib2C0T4al7!-1902206763!957554598!1480139933598][PID::1234342574846829][UID::kenny][OID::6081232168][dcroute::pkyb][VisitorId::4564023574946854][kohls_klbc_cookie::2818886154.23323.0000][kohls_klbd_cookie::204223148.20480.0000][DCRouteS::pkyb-1480139997]\""    };    private static final String[] hosts = {"h121618vaps2241", "h121618vaps2243", "h121618vaps2246", "m121618vaps4241"};    private static final String[] apps = {"ATG", "PROD", "COM"};    private static final String[] servers = {"ORACLE", "WEBLOGIC"};    private static final String[] actions = {            "custLoginSuccess",            "custLoginFailure",            "custCreateAccount",            "ccAuthSuccess",            "ccAuthFailure"    };    private static final String[] statuses = {            "Customer Login Success",            "Customer Login Failed",            "Customer Create Account",            "Credit Card Auth Success",            "Credit Card Auth Failure"    };    private static final String[] setaGreedyStrings = {            "src=10.202.193.253 user=2254005365114518",            "src=10.202.193.252 user=2254006849709259",            "src=10.202.193.254 user=2254006849709211",            "src=10.202.193.252 user=2254005365091562",            "src=10.202.193.252 user=2254006849709442",            "src=10.202.193.253 user=2254006849709443",            "sequence_number=087300909993 avs_reponse=Y action_code=8 auth_code= src=67.163.61.11 customer=2254015499126913 ccv2_response=--- cc_id=pg4767855246",            "amount=55.58 admin=false returnRequestId=5534301335 src=10.202.135.253 replacementOrderId=--- customer=2254015244109625 user=tkb6316 orderId=5366795456",            "src=72.241.100.133 user=2254027578582370 cc_id=Anonymous user, Order id=5533782578, CreditCardUniqueNickName=kohlsCharge - 0403"    };    private static final String[] infoGreedyData = {            "KLSOrderTools-getCommerceItemToShippingAddressMap(-,-,-), Address ID(Profile Key) value is : 56297194514323705 for shippingGroup :sg6621688805 ,for the order id : 7011370438",            "(machine:10.10.40.16)",            "Time Consumed - 22 ms"    };    private static final String[] infoUriPathParameters = {            "/atg/dynamo/servlet/dafpipeline/ActorServlet",            "/atg/commerce/order/OrderTools"    };    private static final String [] keys = {"web", "mobile", "cloud"};    private static final String [] fp = {"[FP:16108:4653977634002364353:4616963674564910873f:4653977634002364353]",            "[FP:16109:5653977634002364353:5616963674564910873f:5653977634002364353]",            "[FP:16110:6653977634002364353:6616963674564910873f:6653977634002364353]"};    private static final String [] topo = {"[TOPO:16108:OpenAPI-SAL:PKY-SAL5Stress2:kls-api-05]",            "[TOPO:16109:OpenAPI-REST:PKY-REST5Stress2:kls-api-06]",            "[TOPO:16110:OpenAPI-ATG-APP:PKY-ATG-APP5Stress2:kls-api-07]"};    public LogWorkers(String logLocation, String logFormat, String msgType, int waitTimeInsec, int noOfMsgsPerBurst, boolean writeToFile){        this.logLocation = logLocation;        this.logFormat = logFormat;        this.msgType = msgType;        this.waitTimeInsec = waitTimeInsec;        this.noOfMsgsPerBurst = noOfMsgsPerBurst;        this.writeToFile = writeToFile;    }    @Override    public void run() {        StringBuilder builder = new StringBuilder();        while (true){            LocalDateTime currentDateTime = LocalDateTime.now();            //System.out.println("Current DateTime: " + currentDateTime);            LocalDate localDate = currentDateTime.toLocalDate();            LocalTime localTime = currentDateTime.toLocalTime();            for (int i = 0; i < noOfMsgsPerBurst; i++){                StringTemplate query = new StringTemplate(logFormat);                if(msgType.equals("SETALOG")){                    createSetaLogQuery(query, localDate, localTime);                    setaGenCount++;                }                else if(msgType.equals("ACCESSLOG")){                    createAccessQuery(query, localDate, localTime);                    accessGenCount++;                }                else if(msgType.equals("ERRORLOG")){                    createSetaLogQuery(query, localDate, localTime);                    errorGenCount++;                }                else if(msgType.equals("GCLOG")){                    createSetaLogQuery(query, localDate, localTime);                    gcGenCount++;                }                else if(msgType.equals("INFOLOG")){                    createInfoLogQuery(query, localDate, localTime);                    infoGenCount++;                }                builder.append(query);                builder.append("\n");            }            System.out.println("AccessLog count is: " + accessGenCount);            System.out.println("SetaLog count is: " + setaGenCount);            System.out.println("ErrorLog count is: " + errorGenCount);            System.out.println("GcLog count is: " + gcGenCount);            System.out.println("InfoLog count is: " + infoGenCount);            System.out.println("=======================================");            BufferedWriter writer = null;            try {                String msg = builder.toString();                if(writeToFile){                    File file = new File(logLocation);                    file.createNewFile();                    writer = new BufferedWriter(new FileWriter(file));                    writer.write(msg);                }                else{                    System.out.print(msg);                }            } catch (IOException e) {                e.printStackTrace();            } finally {                try {                    writer.close();                } catch (IOException e) {                    e.printStackTrace();                }            }            try {                Thread.sleep(waitTimeInsec*1000);            } catch (InterruptedException e) {                e.printStackTrace();            }        }    }    private void createInfoLogQuery(StringTemplate query, LocalDate localDate, LocalTime localTime) {        query.setAttribute("action", getRandomString(actions));        query.setAttribute("corRID", UUID.randomUUID());        query.setAttribute("key", getRandomString(keys));        query.setAttribute("sid", UUID.randomUUID());        query.setAttribute("pid", generateRandomIntInRange(1000, 3000));        query.setAttribute("uid", getRandomString(users));        query.setAttribute("oid", generateRandomIntInRange(1735920, 1735930));        query.setAttribute("bopus", UUID.randomUUID());        query.setAttribute("datetime", getFormatedDate(localDate, "EEE MMM dd") + " "                + localTime + " IST " + getFormatedDate(localDate, "yyyy"));        Instant instant = Instant.now();        long timeStampMillis = instant.toEpochMilli();        query.setAttribute("timestamp", timeStampMillis);        query.setAttribute("uripath", getRandomString(infoUriPathParameters));        query.setAttribute("greedydata", getRandomString(infoGreedyData));    }    private void createSetaLogQuery(StringTemplate query, LocalDate localDate, LocalTime localTime) {        query.setAttribute("month", getFormatedDate(localDate, "MMM"));        query.setAttribute("day", getFormatedDate(localDate, "dd"));        query.setAttribute("year", getFormatedDate(localDate, "yyyy"));        query.setAttribute("time", getFormatedTime(localTime, "HH:mm:ss"));        query.setAttribute("hostname", getRandomString(hosts));        query.setAttribute("cefno", generateRandomIntInRange(1,5));        query.setAttribute("app", getRandomString(servers));        query.setAttribute("serverType", getRandomString(apps));        query.setAttribute("version", generateRandomIntInRange(10, 20) + new Random().nextFloat());        query.setAttribute("actionPerformed", getRandomString(actions));        query.setAttribute("status", getRandomString(statuses));        query.setAttribute("timetaken", generateRandomIntInRange(1, 9));        query.setAttribute("greedydata", getRandomString(setaGreedyStrings));    }    private void createAccessQuery(StringTemplate query, LocalDate localDate, LocalTime localTime) {        query.setAttribute("clientip", generateIp());        query.setAttribute("destip", generateIp());        query.setAttribute("destport", generateRandomIntInRange(8000, 9000));        query.setAttribute("username", getRandomString(users));        query.setAttribute("date", getFormatedDate(localDate, "yyyy-MM-dd"));        query.setAttribute("time", getFormatedTime(localTime, "HH:mm:ss"));        query.setAttribute("resptime", new Random().nextFloat());        query.setAttribute("httpmethod", getRandomString(httpMethods));        query.setAttribute("uripathparam", getRandomString(uriPathParameters));        query.setAttribute("uriparam", getRandomString(uriParams));        query.setAttribute("httpstatuscode", getRandomString(statusCodes));        query.setAttribute("sizeinbytes", generateRandomIntInRange(1000, 2000));        query.setAttribute("useragent", getRandomString(userAgents));        query.setAttribute("xForwardedFor", getRandomString(xForwards));        query.setAttribute("FP", getRandomString(fp));        query.setAttribute("TOPO", getRandomString(topo));        query.setAttribute("greedydata", getRandomString(accessGreedyStrings));    }    private String getFormatedTime(LocalTime localTime, String pattern) {        DateTimeFormatter formatter =                DateTimeFormatter.ofPattern(pattern);        return localTime.format(formatter);    }    private String getFormatedDate(LocalDate localDate, String pattern) {        DateTimeFormatter formatter =                DateTimeFormatter.ofPattern(pattern);        return localDate.format(formatter);    }    private String generateIp(){        Random r = new Random();        return r.nextInt(256) + "." + r.nextInt(256) + "." + r.nextInt(256) + "." + r.nextInt(256);    }    private int generateRandomIntInRange(int start, int end){        Random r = new Random();        return start + r.nextInt(end - start);    }    private String getRandomString(String[] strings){        int idx = new Random().nextInt(strings.length);        String random = (strings[idx]);        return random;    }}